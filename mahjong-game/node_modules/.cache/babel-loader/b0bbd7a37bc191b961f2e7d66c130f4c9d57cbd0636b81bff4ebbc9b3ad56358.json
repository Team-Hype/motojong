{"ast":null,"code":"var _jsxFileName = \"/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport GridCell from './GridCell'; // Import the encapsulated GridCell component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledGrid = styled(motion.div)`\n  position: absolute;\n  top: ${({\n  offsetx\n}) => offsetx}px;\n  left: ${({\n  offsetx\n}) => offsetx}px;\n  justify-content: center;\n  align-content: center;\n  display: flex;\n  flex-wrap: wrap;\n`;\n_c = StyledGrid;\nconst isLeftRightNeighbour = (index, columns, rows, mahjongs) => {\n  const leftIndex = index - 1;\n  const rightIndex = index + 1;\n  const isLeftNeighbour = leftIndex >= 0 && leftIndex % columns !== 0 && mahjongs[Math.floor(leftIndex / columns)][leftIndex % columns];\n  const isRightNeighbour = rightIndex < columns * rows - 1 && rightIndex % columns !== columns - 1 && mahjongs[Math.floor(rightIndex / columns)][rightIndex % columns];\n  return isLeftNeighbour && isRightNeighbour;\n};\nconst Grid = ({\n  offsetx,\n  offsety,\n  columns,\n  rows,\n  gap,\n  height,\n  width,\n  style,\n  mahjongs\n}) => {\n  _s();\n  const [selectedCells, setSelectedCells] = useState({});\n  const onCellClick = index => {\n    setSelectedCells(prevSelectedCells => ({\n      ...prevSelectedCells,\n      [index]: !prevSelectedCells[index]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(StyledGrid, {\n    offsetx: offsetx,\n    offsety: offsety,\n    columns: columns,\n    rows: rows,\n    gap: gap,\n    height: height,\n    width: width,\n    style: style,\n    mahjongs: mahjongs,\n    children: mahjongs.flat().map((mahjong, index) => /*#__PURE__*/_jsxDEV(GridCell, {\n      isBlocked: !isLeftRightNeighbour(index, columns, rows, mahjongs),\n      column: index % columns,\n      row: Math.floor(index / columns),\n      gap: gap,\n      height: height,\n      width: width,\n      isSelected: selectedCells[index] || false,\n      onClick: () => onCellClick(index),\n      mahjong: mahjong\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"GLWHfO5BGqkKP3qftTnleplvfGg=\");\n_c2 = Grid;\nexport default Grid;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledGrid\");\n$RefreshReg$(_c2, \"Grid\");","map":{"version":3,"names":["React","useState","styled","motion","GridCell","jsxDEV","_jsxDEV","StyledGrid","div","offsetx","_c","isLeftRightNeighbour","index","columns","rows","mahjongs","leftIndex","rightIndex","isLeftNeighbour","Math","floor","isRightNeighbour","Grid","offsety","gap","height","width","style","_s","selectedCells","setSelectedCells","onCellClick","prevSelectedCells","children","flat","map","mahjong","isBlocked","column","row","isSelected","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport GridCell from './GridCell'; // Import the encapsulated GridCell component\nimport { Mahjong } from './game/mahjongs/Mahjong';\n\ntype GridProps = {\n  columns: number;\n  rows: number;\n  gap: number;\n  height: number;\n  width: number;\n  style?: React.CSSProperties;\n  mahjongs: (Mahjong | null)[][];\n  offsetx?: number;\n  offsety?: number;\n};\n\nconst StyledGrid = styled(motion.div)<GridProps>`\n  position: absolute;\n  top: ${({ offsetx }) => offsetx}px;\n  left: ${({ offsetx }) => offsetx}px;\n  justify-content: center;\n  align-content: center;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst isLeftRightNeighbour = (index: number, columns: number, rows: number, mahjongs: (Mahjong | null)[][]) => {\n  const leftIndex = index - 1;\n  const rightIndex = index + 1;\n  const isLeftNeighbour = leftIndex >= 0 && leftIndex % columns !== 0 && mahjongs[Math.floor(leftIndex / columns)][leftIndex % columns];\n  const isRightNeighbour = rightIndex < columns * rows - 1 && rightIndex % columns !== columns - 1 && mahjongs[Math.floor(rightIndex / columns)][rightIndex % columns];\n  return isLeftNeighbour && isRightNeighbour;\n};\n\nconst Grid: React.FC<GridProps> = ({offsetx, offsety, columns, rows, gap, height, width, style, mahjongs }) => {\n  const [selectedCells, setSelectedCells] = useState<{ [key: number]: boolean }>({});\n\n  const onCellClick = (index: number) => {\n    setSelectedCells((prevSelectedCells) => ({\n      ...prevSelectedCells,\n      [index]: !prevSelectedCells[index],\n    }));\n  };\n\n  return (\n    <StyledGrid offsetx={offsetx} offsety={offsety} columns={columns} rows={rows} gap={gap} height={height} width={width} style={style} mahjongs={mahjongs}>\n      {mahjongs.flat().map((mahjong, index) => (\n        <GridCell\n          key={index}\n          isBlocked={!isLeftRightNeighbour(index, columns, rows, mahjongs)}\n          column={index % columns}\n          row={Math.floor(index / columns)}\n          gap={gap}\n          height={height}\n          width={width}\n          isSelected={selectedCells[index] || false}\n          onClick={() => onCellClick(index)}\n          mahjong={mahjong}\n        />\n      ))}\n    </StyledGrid>\n  );\n};\n\nexport default Grid;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}