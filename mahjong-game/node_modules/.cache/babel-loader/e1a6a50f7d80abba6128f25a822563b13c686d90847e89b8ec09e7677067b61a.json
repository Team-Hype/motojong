{"ast":null,"code":"var _jsxFileName = \"/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport GridCell from './GridCell'; // Import the encapsulated GridCell component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledGrid = styled(motion.div)`\n  position: relative;\n  bottom: ${({\n  height,\n  gap,\n  rows\n}) => rows * (height + gap)}px;\n  right: ${({\n  width,\n  gap,\n  columns\n}) => columns * (width + gap)}px;\n`;\n_c = StyledGrid;\nconst isBlocked = (index, columns, rows, mahjongs) => {\n  const row = Math.floor(index / columns);\n  const col = index % columns;\n\n  // Check if the cell itself is null (e.g., empty space)\n  if (mahjongs[row][col] === null) {\n    return true;\n  }\n\n  // Check surrounding cells or conditions to determine if the cell is blocked\n  // For example, check if neighboring cells are blocked or empty\n  return false; // Replace with actual logic as needed\n};\nconst Grid = ({\n  columns,\n  rows,\n  gap,\n  height,\n  width,\n  style,\n  mahjongs\n}) => {\n  _s();\n  const [selectedCells, setSelectedCells] = useState({});\n  const onCellClick = index => {\n    const currentlySelectedCells = Object.keys(selectedCells).filter(key => selectedCells[+key]);\n    if (currentlySelectedCells.length === 2) {\n      const cell1 = mahjongs[Math.floor(+currentlySelectedCells[0] / columns)][+currentlySelectedCells[0] % columns];\n      const cell2 = mahjongs[Math.floor(+currentlySelectedCells[1] / columns)][+currentlySelectedCells[1] % columns];\n      if ((cell1 === null || cell1 === void 0 ? void 0 : cell1.image) === (cell2 === null || cell2 === void 0 ? void 0 : cell2.image)) {\n        return;\n      } else {\n        setSelectedCells(prevSelectedCells => ({\n          [index]: true\n        }));\n      }\n    } else {\n      setSelectedCells(prevSelectedCells => ({\n        ...prevSelectedCells,\n        [index]: !prevSelectedCells[index]\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(StyledGrid, {\n    columns: columns,\n    rows: rows,\n    gap: gap,\n    height: height / 2,\n    width: width / 2,\n    style: style,\n    mahjongs: mahjongs,\n    children: mahjongs.flat().map((mahjong, index) => /*#__PURE__*/_jsxDEV(GridCell, {\n      isBlocked: isBlocked(index, columns, rows, mahjongs),\n      column: index % columns,\n      row: Math.floor(index / columns),\n      gap: gap,\n      height: height,\n      width: width,\n      isSelected: selectedCells[index] || false,\n      onClick: () => onCellClick(index),\n      mahjong: mahjong\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"GLWHfO5BGqkKP3qftTnleplvfGg=\");\n_c2 = Grid;\nexport default Grid;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledGrid\");\n$RefreshReg$(_c2, \"Grid\");","map":{"version":3,"names":["React","useState","styled","motion","GridCell","jsxDEV","_jsxDEV","StyledGrid","div","height","gap","rows","width","columns","_c","isBlocked","index","mahjongs","row","Math","floor","col","Grid","style","_s","selectedCells","setSelectedCells","onCellClick","currentlySelectedCells","Object","keys","filter","key","length","cell1","cell2","image","prevSelectedCells","children","flat","map","mahjong","column","isSelected","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport GridCell from './GridCell'; // Import the encapsulated GridCell component\nimport { Mahjong } from './game/mahjongs/Mahjong';\n\ntype GridProps = {\n  columns: number;\n  rows: number;\n  gap: number;\n  height: number;\n  width: number;\n  style?: React.CSSProperties;\n  mahjongs: (Mahjong | null)[][];\n};\n\nconst StyledGrid = styled(motion.div)<GridProps>`\n  position: relative;\n  bottom: ${({height, gap, rows}) => (rows * (height + gap))}px;\n  right: ${({width, gap, columns}) => columns * (width + gap)}px;\n`;\n\nconst isBlocked = (index: number, columns: number, rows: number, mahjongs: (Mahjong | null)[][]): boolean => {\n    const row = Math.floor(index / columns);\n    const col = index % columns;\n  \n    // Check if the cell itself is null (e.g., empty space)\n    if (mahjongs[row][col] === null) {\n      return true;\n    }\n  \n    // Check surrounding cells or conditions to determine if the cell is blocked\n    // For example, check if neighboring cells are blocked or empty\n    return false; // Replace with actual logic as needed\n  };\n  \nconst Grid: React.FC<GridProps> = ({ columns, rows, gap, height, width, style, mahjongs }) => {\n  const [selectedCells, setSelectedCells] = useState<{ [key: number]: boolean }>({});\n\n  const onCellClick = (index: number) => {\n    const currentlySelectedCells = Object.keys(selectedCells).filter((key) => selectedCells[+key]);\n    if (currentlySelectedCells.length === 2) {\n      const cell1 = mahjongs[Math.floor(+currentlySelectedCells[0] / columns)][+currentlySelectedCells[0] % columns];\n      const cell2 = mahjongs[Math.floor(+currentlySelectedCells[1] / columns)][+currentlySelectedCells[1] % columns];\n      if (cell1?.image === cell2?.image) {\n        return;\n      } else {\n        setSelectedCells((prevSelectedCells) => ({ [index]: true }));\n      }\n    } else {\n      setSelectedCells((prevSelectedCells) => ({\n        ...prevSelectedCells,\n        [index]: !prevSelectedCells[index],\n      }));\n    }\n  };\n\n  return (\n    <StyledGrid columns={columns} rows={rows} gap={gap} height={height/2} width={width/2} style={style} mahjongs={mahjongs}>\n      {mahjongs.flat().map((mahjong, index) => (\n        <GridCell\n          key={index}\n          isBlocked={isBlocked(index, columns, rows, mahjongs)}\n          column={index % columns}\n          row={Math.floor(index / columns)}\n          gap={gap}\n          height={height}\n          width={width}\n          isSelected={selectedCells[index] || false}\n          onClick={() => onCellClick(index)}\n          mahjong={mahjong}\n        />\n      ))}\n    </StyledGrid>\n  );\n};\n\nexport default Grid;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAanC,MAAMC,UAAU,GAAGL,MAAM,CAACC,MAAM,CAACK,GAAG,CAAY;AAChD;AACA,YAAY,CAAC;EAACC,MAAM;EAAEC,GAAG;EAAEC;AAAI,CAAC,KAAMA,IAAI,IAAIF,MAAM,GAAGC,GAAG,CAAE;AAC5D,WAAW,CAAC;EAACE,KAAK;EAAEF,GAAG;EAAEG;AAAO,CAAC,KAAKA,OAAO,IAAID,KAAK,GAAGF,GAAG,CAAC;AAC7D,CAAC;AAACI,EAAA,GAJIP,UAAU;AAMhB,MAAMQ,SAAS,GAAGA,CAACC,KAAa,EAAEH,OAAe,EAAEF,IAAY,EAAEM,QAA8B,KAAc;EACzG,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACJ,KAAK,GAAGH,OAAO,CAAC;EACvC,MAAMQ,GAAG,GAAGL,KAAK,GAAGH,OAAO;;EAE3B;EACA,IAAII,QAAQ,CAACC,GAAG,CAAC,CAACG,GAAG,CAAC,KAAK,IAAI,EAAE;IAC/B,OAAO,IAAI;EACb;;EAEA;EACA;EACA,OAAO,KAAK,CAAC,CAAC;AAChB,CAAC;AAEH,MAAMC,IAAyB,GAAGA,CAAC;EAAET,OAAO;EAAEF,IAAI;EAAED,GAAG;EAAED,MAAM;EAAEG,KAAK;EAAEW,KAAK;EAAEN;AAAS,CAAC,KAAK;EAAAO,EAAA;EAC5F,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGzB,QAAQ,CAA6B,CAAC,CAAC,CAAC;EAElF,MAAM0B,WAAW,GAAIX,KAAa,IAAK;IACrC,MAAMY,sBAAsB,GAAGC,MAAM,CAACC,IAAI,CAACL,aAAa,CAAC,CAACM,MAAM,CAAEC,GAAG,IAAKP,aAAa,CAAC,CAACO,GAAG,CAAC,CAAC;IAC9F,IAAIJ,sBAAsB,CAACK,MAAM,KAAK,CAAC,EAAE;MACvC,MAAMC,KAAK,GAAGjB,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC,CAACQ,sBAAsB,CAAC,CAAC,CAAC,GAAGf,OAAO,CAAC,CAAC,CAAC,CAACe,sBAAsB,CAAC,CAAC,CAAC,GAAGf,OAAO,CAAC;MAC9G,MAAMsB,KAAK,GAAGlB,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC,CAACQ,sBAAsB,CAAC,CAAC,CAAC,GAAGf,OAAO,CAAC,CAAC,CAAC,CAACe,sBAAsB,CAAC,CAAC,CAAC,GAAGf,OAAO,CAAC;MAC9G,IAAI,CAAAqB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,KAAK,OAAKD,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,KAAK,GAAE;QACjC;MACF,CAAC,MAAM;QACLV,gBAAgB,CAAEW,iBAAiB,KAAM;UAAE,CAACrB,KAAK,GAAG;QAAK,CAAC,CAAC,CAAC;MAC9D;IACF,CAAC,MAAM;MACLU,gBAAgB,CAAEW,iBAAiB,KAAM;QACvC,GAAGA,iBAAiB;QACpB,CAACrB,KAAK,GAAG,CAACqB,iBAAiB,CAACrB,KAAK;MACnC,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,oBACEV,OAAA,CAACC,UAAU;IAACM,OAAO,EAAEA,OAAQ;IAACF,IAAI,EAAEA,IAAK;IAACD,GAAG,EAAEA,GAAI;IAACD,MAAM,EAAEA,MAAM,GAAC,CAAE;IAACG,KAAK,EAAEA,KAAK,GAAC,CAAE;IAACW,KAAK,EAAEA,KAAM;IAACN,QAAQ,EAAEA,QAAS;IAAAqB,QAAA,EACpHrB,QAAQ,CAACsB,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,OAAO,EAAEzB,KAAK,kBAClCV,OAAA,CAACF,QAAQ;MAEPW,SAAS,EAAEA,SAAS,CAACC,KAAK,EAAEH,OAAO,EAAEF,IAAI,EAAEM,QAAQ,CAAE;MACrDyB,MAAM,EAAE1B,KAAK,GAAGH,OAAQ;MACxBK,GAAG,EAAEC,IAAI,CAACC,KAAK,CAACJ,KAAK,GAAGH,OAAO,CAAE;MACjCH,GAAG,EAAEA,GAAI;MACTD,MAAM,EAAEA,MAAO;MACfG,KAAK,EAAEA,KAAM;MACb+B,UAAU,EAAElB,aAAa,CAACT,KAAK,CAAC,IAAI,KAAM;MAC1C4B,OAAO,EAAEA,CAAA,KAAMjB,WAAW,CAACX,KAAK,CAAE;MAClCyB,OAAO,EAAEA;IAAQ,GATZzB,KAAK;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEjB,CAAC;AAACxB,EAAA,CAvCIF,IAAyB;AAAA2B,GAAA,GAAzB3B,IAAyB;AAyC/B,eAAeA,IAAI;AAAC,IAAAR,EAAA,EAAAmC,GAAA;AAAAC,YAAA,CAAApC,EAAA;AAAAoC,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}