{"ast":null,"code":"var _jsxFileName = \"/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport GridCell from './GridCell'; // Import the encapsulated GridCell component\n\nimport { BMWLogo } from './mahjongs/BMWSample';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledGrid = styled(motion.div)`\n  display: grid;\n  grid-template-columns: repeat(${({\n  columns\n}) => columns}, ${({\n  width\n}) => width}px);\n  grid-template-rows: repeat(${({\n  rows\n}) => rows}, ${({\n  height\n}) => height}px);\n  grid-gap: ${({\n  gap\n}) => gap}px;\n  justify-content: center;\n  align-content: center;\n  background-color: rgba(40, 44, 52, 0.5);\n  position: absolute;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  left: 0;\n`;\n_c = StyledGrid;\nconst Grid = ({\n  columns,\n  rows,\n  gap,\n  height,\n  width,\n  style\n}) => {\n  _s();\n  const [selectedCells, setSelectedCells] = useState({});\n  const onCellClick = index => {\n    setSelectedCells(prevSelectedCells => ({\n      ...prevSelectedCells,\n      [index]: !prevSelectedCells[index]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(StyledGrid, {\n    columns: columns,\n    rows: rows,\n    gap: gap,\n    height: height,\n    width: width,\n    style: style,\n    children: [...Array(columns * rows)].map((_, index) => /*#__PURE__*/_jsxDEV(GridCell, {\n      isSelected: selectedCells[index] || false,\n      onClick: () => onCellClick(index),\n      mahjong: new BMWLogo()\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"GLWHfO5BGqkKP3qftTnleplvfGg=\");\n_c2 = Grid;\nexport default Grid;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledGrid\");\n$RefreshReg$(_c2, \"Grid\");","map":{"version":3,"names":["React","useState","styled","motion","GridCell","BMWLogo","jsxDEV","_jsxDEV","StyledGrid","div","columns","width","rows","height","gap","_c","Grid","style","_s","selectedCells","setSelectedCells","onCellClick","index","prevSelectedCells","children","Array","map","_","isSelected","onClick","mahjong","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport GridCell from './GridCell'; // Import the encapsulated GridCell component\nimport { Mahjong, EmptyMahjong } from './mahjongs/Mahjong';\nimport { stat } from 'fs';\nimport { BMWHexagon, BMWLogo } from './mahjongs/BMWSample';\ntype GridProps = {\n  columns: number;\n  rows: number;\n  gap: number;\n  height: number;\n  width: number;\n  style?: React.CSSProperties;\n};\n\nconst StyledGrid = styled(motion.div)<GridProps>`\n  display: grid;\n  grid-template-columns: repeat(${({ columns }) => columns}, ${({ width }) => width}px);\n  grid-template-rows: repeat(${({ rows }) => rows}, ${({ height }) => height}px);\n  grid-gap: ${({ gap }) => gap}px;\n  justify-content: center;\n  align-content: center;\n  background-color: rgba(40, 44, 52, 0.5);\n  position: absolute;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  left: 0;\n`;\n\nconst Grid: React.FC<GridProps> = ({ columns, rows, gap, height, width, style }) => {\n  const [selectedCells, setSelectedCells] = useState<{ [key: number]: boolean }>({});\n\n  const onCellClick = (index: number) => {\n    setSelectedCells((prevSelectedCells) => ({\n      ...prevSelectedCells,\n      [index]: !prevSelectedCells[index],\n    }));\n  };\n\n  return (\n    <StyledGrid columns={columns} rows={rows} gap={gap} height={height} width={width} style={style}>\n      {[...Array(columns * rows)].map((_, index) => (\n        <GridCell\n          key={index}\n          isSelected={selectedCells[index] || false}\n          onClick={() => onCellClick(index)}\n          mahjong={new  BMWLogo()}\n        />\n      ))}\n    </StyledGrid>\n  );\n};\n\nexport default Grid;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;;AAGnC,SAAqBC,OAAO,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAU3D,MAAMC,UAAU,GAAGN,MAAM,CAACC,MAAM,CAACM,GAAG,CAAY;AAChD;AACA,kCAAkC,CAAC;EAAEC;AAAQ,CAAC,KAAKA,OAAO,KAAK,CAAC;EAAEC;AAAM,CAAC,KAAKA,KAAK;AACnF,+BAA+B,CAAC;EAAEC;AAAK,CAAC,KAAKA,IAAI,KAAK,CAAC;EAAEC;AAAO,CAAC,KAAKA,MAAM;AAC5E,cAAc,CAAC;EAAEC;AAAI,CAAC,KAAKA,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAbIP,UAAU;AAehB,MAAMQ,IAAyB,GAAGA,CAAC;EAAEN,OAAO;EAAEE,IAAI;EAAEE,GAAG;EAAED,MAAM;EAAEF,KAAK;EAAEM;AAAM,CAAC,KAAK;EAAAC,EAAA;EAClF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAA6B,CAAC,CAAC,CAAC;EAElF,MAAMoB,WAAW,GAAIC,KAAa,IAAK;IACrCF,gBAAgB,CAAEG,iBAAiB,KAAM;MACvC,GAAGA,iBAAiB;MACpB,CAACD,KAAK,GAAG,CAACC,iBAAiB,CAACD,KAAK;IACnC,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACEf,OAAA,CAACC,UAAU;IAACE,OAAO,EAAEA,OAAQ;IAACE,IAAI,EAAEA,IAAK;IAACE,GAAG,EAAEA,GAAI;IAACD,MAAM,EAAEA,MAAO;IAACF,KAAK,EAAEA,KAAM;IAACM,KAAK,EAAEA,KAAM;IAAAO,QAAA,EAC5F,CAAC,GAAGC,KAAK,CAACf,OAAO,GAAGE,IAAI,CAAC,CAAC,CAACc,GAAG,CAAC,CAACC,CAAC,EAAEL,KAAK,kBACvCf,OAAA,CAACH,QAAQ;MAEPwB,UAAU,EAAET,aAAa,CAACG,KAAK,CAAC,IAAI,KAAM;MAC1CO,OAAO,EAAEA,CAAA,KAAMR,WAAW,CAACC,KAAK,CAAE;MAClCQ,OAAO,EAAE,IAAKzB,OAAO,CAAC;IAAE,GAHnBiB,KAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEjB,CAAC;AAAChB,EAAA,CAtBIF,IAAyB;AAAAmB,GAAA,GAAzBnB,IAAyB;AAwB/B,eAAeA,IAAI;AAAC,IAAAD,EAAA,EAAAoB,GAAA;AAAAC,YAAA,CAAArB,EAAA;AAAAqB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}