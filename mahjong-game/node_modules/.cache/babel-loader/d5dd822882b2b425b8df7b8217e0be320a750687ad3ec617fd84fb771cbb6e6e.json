{"ast":null,"code":"var _jsxFileName = \"/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport GridCell from './GridCell'; // Import the encapsulated GridCell component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledGrid = styled(motion.div)`\n  position: relative;\n  bottom: ${({\n  height,\n  gap,\n  rows\n}) => rows * (height + gap)}px;\n  right: ${({\n  width,\n  gap,\n  columns\n}) => columns * (width + gap)}px;\n`;\n_c = StyledGrid;\nconst isBlocked = (index, columns, rows, mahjongs) => {\n  const row = Math.floor(index / columns);\n  const col = index % columns;\n\n  // Check if the cell itself is null (e.g., empty space)\n  if (mahjongs[row][col] === null) {\n    return true;\n  }\n\n  // Check surrounding cells or conditions to determine if the cell is blocked\n  // For example, check if neighboring cells are blocked or empty\n  return false; // Replace with actual logic as needed\n};\nconst Grid = ({\n  columns,\n  rows,\n  gap,\n  height,\n  width,\n  style,\n  mahjongs\n}) => {\n  _s();\n  const [selectedCells, setSelectedCells] = useState({});\n  const [matchedCells, setMatchedCells] = useState({});\n  const onCellClick = index => {\n    const currentlySelectedCells = Object.keys(selectedCells).filter(key => selectedCells[+key]);\n    if (currentlySelectedCells.length === 1) {\n      const cell1Index = +currentlySelectedCells[0];\n      const cell2Index = +index;\n      if (cell1Index === cell2Index) {\n        setSelectedCells({});\n        return;\n      }\n      const cell1 = mahjongs[Math.floor(cell1Index / columns)][cell1Index % columns];\n      const cell2 = mahjongs[Math.floor(cell2Index / columns)][cell2Index % columns];\n      if ((cell1 === null || cell1 === void 0 ? void 0 : cell1.image) === (cell2 === null || cell2 === void 0 ? void 0 : cell2.image)) {\n        setMatchedCells(prevMatchedCells => ({\n          ...prevMatchedCells,\n          [cell1Index]: true,\n          [cell2Index]: true\n        }));\n        setTimeout(() => {\n          mahjongs[Math.floor(cell1Index / columns)][cell1Index % columns] = null;\n          mahjongs[Math.floor(cell2Index / columns)][cell2Index % columns] = null;\n        }, 1000);\n      }\n      setSelectedCells({});\n    } else {\n      setSelectedCells(prevSelectedCells => ({\n        ...prevSelectedCells,\n        [index]: !prevSelectedCells[index]\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(StyledGrid, {\n    columns: columns,\n    rows: rows,\n    gap: gap,\n    height: height / 2,\n    width: width / 2,\n    style: style,\n    mahjongs: mahjongs,\n    children: mahjongs.flat().map((mahjong, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      transition: {\n        duration: 0.5\n      },\n      exit: {\n        opacity: 0\n      },\n      whileTap: {\n        scale: 1.05\n      },\n      whileHover: {\n        scale: 1.1\n      },\n      variants: {\n        matched: {\n          scale: 0,\n          opacity: 0,\n          transition: {\n            duration: 1,\n            ease: 'easeInOut',\n            times: [0, 0.5, 1]\n          }\n        }\n      },\n      animate: matchedCells[index] ? 'matched' : undefined,\n      children: /*#__PURE__*/_jsxDEV(GridCell, {\n        isBlocked: isBlocked(index, columns, rows, mahjongs),\n        column: index % columns,\n        row: Math.floor(index / columns),\n        gap: gap,\n        height: height,\n        width: width,\n        isSelected: selectedCells[index] || false,\n        onClick: () => onCellClick(index),\n        mahjong: mahjong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"5KCpvuNWYulcj+XRE+TsGEgJDLs=\");\n_c2 = Grid;\nexport default Grid;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledGrid\");\n$RefreshReg$(_c2, \"Grid\");","map":{"version":3,"names":["React","useState","styled","motion","GridCell","jsxDEV","_jsxDEV","StyledGrid","div","height","gap","rows","width","columns","_c","isBlocked","index","mahjongs","row","Math","floor","col","Grid","style","_s","selectedCells","setSelectedCells","matchedCells","setMatchedCells","onCellClick","currentlySelectedCells","Object","keys","filter","key","length","cell1Index","cell2Index","cell1","cell2","image","prevMatchedCells","setTimeout","prevSelectedCells","children","flat","map","mahjong","initial","opacity","transition","duration","exit","whileTap","scale","whileHover","variants","matched","ease","times","animate","undefined","column","isSelected","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport GridCell from './GridCell'; // Import the encapsulated GridCell component\nimport { Mahjong } from './game/mahjongs/Mahjong';\n\ntype GridProps = {\n  columns: number;\n  rows: number;\n  gap: number;\n  height: number;\n  width: number;\n  style?: React.CSSProperties;\n  mahjongs: (Mahjong | null)[][];\n};\n\nconst StyledGrid = styled(motion.div)<GridProps>`\n  position: relative;\n  bottom: ${({height, gap, rows}) => (rows * (height + gap))}px;\n  right: ${({width, gap, columns}) => columns * (width + gap)}px;\n`;\n\nconst isBlocked = (index: number, columns: number, rows: number, mahjongs: (Mahjong | null)[][]): boolean => {\n    const row = Math.floor(index / columns);\n    const col = index % columns;\n  \n    // Check if the cell itself is null (e.g., empty space)\n    if (mahjongs[row][col] === null) {\n      return true;\n    }\n  \n    // Check surrounding cells or conditions to determine if the cell is blocked\n    // For example, check if neighboring cells are blocked or empty\n    return false; // Replace with actual logic as needed\n  };\n  \nconst Grid: React.FC<GridProps> = ({ columns, rows, gap, height, width, style, mahjongs }) => {\n  const [selectedCells, setSelectedCells] = useState<{ [key: number]: boolean }>({})\n  const [matchedCells, setMatchedCells] = useState<{ [key: number]: boolean }>({})\n\n  const onCellClick = (index: number) => {\n    const currentlySelectedCells = Object.keys(selectedCells).filter((key) => selectedCells[+key]);\n    if (currentlySelectedCells.length === 1) {\n      const cell1Index = +currentlySelectedCells[0];\n      const cell2Index = +index;\n      if (cell1Index === cell2Index) {\n        setSelectedCells({});\n        return;\n      }\n      const cell1 = mahjongs[Math.floor(cell1Index / columns)][cell1Index % columns];\n      const cell2 = mahjongs[Math.floor(cell2Index / columns)][cell2Index % columns];\n      if (cell1?.image === cell2?.image) {\n        setMatchedCells((prevMatchedCells) => ({\n          ...prevMatchedCells,\n          [cell1Index]: true,\n          [cell2Index]: true,\n        }));\n        setTimeout(() => {\n          mahjongs[Math.floor(cell1Index / columns)][cell1Index % columns] = null;\n          mahjongs[Math.floor(cell2Index / columns)][cell2Index % columns] = null;\n        }, 1000);\n      }\n      setSelectedCells({});\n\n    } else {\n      setSelectedCells((prevSelectedCells) => ({\n        ...prevSelectedCells,\n        [index]: !prevSelectedCells[index],\n      }));\n    }\n  };\n\n  return (\n    <StyledGrid columns={columns} rows={rows} gap={gap} height={height/2} width={width/2} style={style} mahjongs={mahjongs}>\n      {mahjongs.flat().map((mahjong, index) => (\n        <motion.div\n          key={index}\n          initial={{ opacity: 0 }}\n          transition={{ duration: 0.5 }}\n          exit={{ opacity: 0 }}\n          whileTap={{ scale: 1.05 }}\n          whileHover={{ scale: 1.1 }}\n          variants={{\n            matched: {\n              scale: 0,\n              opacity: 0,\n              transition: {\n                duration: 1,\n                ease: 'easeInOut',\n                times: [0, 0.5, 1],\n              },\n            },\n          }}\n          animate={matchedCells[index] ? 'matched' : undefined}\n        >\n          <GridCell\n            isBlocked={isBlocked(index, columns, rows, mahjongs)}\n            column={index % columns}\n            row={Math.floor(index / columns)}\n            gap={gap}\n            height={height}\n            width={width}\n            isSelected={selectedCells[index] || false}\n            onClick={() => onCellClick(index)}\n            mahjong={mahjong}\n          />\n        </motion.div>\n      ))}\n    </StyledGrid>\n  );\n};\n\nexport default Grid;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}