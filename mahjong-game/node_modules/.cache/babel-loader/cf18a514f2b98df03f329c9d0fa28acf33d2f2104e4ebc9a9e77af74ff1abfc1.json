{"ast":null,"code":"var _jsxFileName = \"/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport GridCell from './GridCell'; // Import the encapsulated GridCell component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledGrid = styled(motion.div)`\n  width: ${({\n  columns,\n  width,\n  gap\n}) => columns * width + (columns - 1) * gap}px;\n  height: ${({\n  rows,\n  height,\n  gap\n}) => rows * height + (rows - 1) * gap}px;\n  justify-content: center;\n  align-content: center;\n  display: flex;\n  flex-wrap: wrap;\n  position: absolute;\n`;\n_c = StyledGrid;\nconst Grid = ({\n  columns,\n  rows,\n  gap,\n  height,\n  width,\n  style,\n  mahjongs\n}) => {\n  _s();\n  const [selectedCells, setSelectedCells] = useState({});\n\n  // Function to handle clicks on the grid container\n  const onGridClick = e => {\n    e.stopPropagation(); // Prevent the event from bubbling to individual cells\n    console.log('Grid clicked');\n    // You can add logic here for grid-level interactions\n  };\n  const onCellClick = (index, e) => {\n    e.stopPropagation(); // Prevent the click from propagating to the grid\n    setSelectedCells(prevSelectedCells => ({\n      ...prevSelectedCells,\n      [index]: !prevSelectedCells[index]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(StyledGrid, {\n    columns: columns,\n    rows: rows,\n    gap: gap,\n    height: height,\n    width: width,\n    style: style,\n    onClick: onGridClick // Handle grid-level click\n    ,\n    children: mahjongs.flat().map((mahjong, index) => mahjong !== null && /*#__PURE__*/_jsxDEV(GridCell, {\n      column: index % columns,\n      row: Math.floor(index / columns),\n      gap: gap,\n      height: height,\n      width: width,\n      isSelected: selectedCells[index] || false,\n      onClick: e => onCellClick(index, e) // Pass the event to the cell handler\n      ,\n      mahjong: mahjong\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"GLWHfO5BGqkKP3qftTnleplvfGg=\");\n_c2 = Grid;\nexport default Grid;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledGrid\");\n$RefreshReg$(_c2, \"Grid\");","map":{"version":3,"names":["React","useState","styled","motion","GridCell","jsxDEV","_jsxDEV","StyledGrid","div","columns","width","gap","rows","height","_c","Grid","style","mahjongs","_s","selectedCells","setSelectedCells","onGridClick","e","stopPropagation","console","log","onCellClick","index","prevSelectedCells","onClick","children","flat","map","mahjong","column","row","Math","floor","isSelected","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport GridCell from './GridCell'; // Import the encapsulated GridCell component\nimport { Mahjong } from './game/mahjongs/Mahjong';\n\ntype GridProps = {\n  columns: number;\n  rows: number;\n  gap: number;\n  height: number;\n  width: number;\n  style?: React.CSSProperties;\n  mahjongs: (Mahjong | null)[][];\n};\n\nconst StyledGrid = styled(motion.div)<GridProps>`\n  width: ${({ columns, width, gap }) => columns * width + (columns - 1) * gap}px;\n  height: ${({ rows, height, gap }) => rows * height + (rows - 1) * gap}px;\n  justify-content: center;\n  align-content: center;\n  display: flex;\n  flex-wrap: wrap;\n  position: absolute;\n`;\n\nconst Grid: React.FC<GridProps> = ({ columns, rows, gap, height, width, style, mahjongs }) => {\n  const [selectedCells, setSelectedCells] = useState<{ [key: number]: boolean }>({});\n\n  // Function to handle clicks on the grid container\n  const onGridClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation(); // Prevent the event from bubbling to individual cells\n    console.log('Grid clicked');\n    // You can add logic here for grid-level interactions\n  };\n\n  const onCellClick = (index: number, e: React.MouseEvent) => {\n    e.stopPropagation(); // Prevent the click from propagating to the grid\n    setSelectedCells((prevSelectedCells) => ({\n      ...prevSelectedCells,\n      [index]: !prevSelectedCells[index],\n    }));\n  };\n\n  return (\n    <StyledGrid\n      columns={columns}\n      rows={rows}\n      gap={gap}\n      height={height}\n      width={width}\n      style={style}\n      onClick={onGridClick} // Handle grid-level click\n    >\n      {mahjongs.flat().map((mahjong, index) => (\n        mahjong !== null && (\n          <GridCell\n            key={index}\n            column={index % columns}\n            row={Math.floor(index / columns)}\n            gap={gap}\n            height={height}\n            width={width}\n            isSelected={selectedCells[index] || false}\n            onClick={(e) => onCellClick(index, e)} // Pass the event to the cell handler\n            mahjong={mahjong}\n          />\n        )\n      ))}\n    </StyledGrid>\n  );\n};\n\nexport default Grid;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAanC,MAAMC,UAAU,GAAGL,MAAM,CAACC,MAAM,CAACK,GAAG,CAAY;AAChD,WAAW,CAAC;EAAEC,OAAO;EAAEC,KAAK;EAAEC;AAAI,CAAC,KAAKF,OAAO,GAAGC,KAAK,GAAG,CAACD,OAAO,GAAG,CAAC,IAAIE,GAAG;AAC7E,YAAY,CAAC;EAAEC,IAAI;EAAEC,MAAM;EAAEF;AAAI,CAAC,KAAKC,IAAI,GAAGC,MAAM,GAAG,CAACD,IAAI,GAAG,CAAC,IAAID,GAAG;AACvE;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,EAAA,GARIP,UAAU;AAUhB,MAAMQ,IAAyB,GAAGA,CAAC;EAAEN,OAAO;EAAEG,IAAI;EAAED,GAAG;EAAEE,MAAM;EAAEH,KAAK;EAAEM,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5F,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAA6B,CAAC,CAAC,CAAC;;EAElF;EACA,MAAMoB,WAAW,GAAIC,CAA+C,IAAK;IACvEA,CAAC,CAACC,eAAe,CAAC,CAAC,CAAC,CAAC;IACrBC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3B;EACF,CAAC;EAED,MAAMC,WAAW,GAAGA,CAACC,KAAa,EAAEL,CAAmB,KAAK;IAC1DA,CAAC,CAACC,eAAe,CAAC,CAAC,CAAC,CAAC;IACrBH,gBAAgB,CAAEQ,iBAAiB,KAAM;MACvC,GAAGA,iBAAiB;MACpB,CAACD,KAAK,GAAG,CAACC,iBAAiB,CAACD,KAAK;IACnC,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACErB,OAAA,CAACC,UAAU;IACTE,OAAO,EAAEA,OAAQ;IACjBG,IAAI,EAAEA,IAAK;IACXD,GAAG,EAAEA,GAAI;IACTE,MAAM,EAAEA,MAAO;IACfH,KAAK,EAAEA,KAAM;IACbM,KAAK,EAAEA,KAAM;IACba,OAAO,EAAER,WAAY,CAAC;IAAA;IAAAS,QAAA,EAErBb,QAAQ,CAACc,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,OAAO,EAAEN,KAAK,KAClCM,OAAO,KAAK,IAAI,iBACd3B,OAAA,CAACF,QAAQ;MAEP8B,MAAM,EAAEP,KAAK,GAAGlB,OAAQ;MACxB0B,GAAG,EAAEC,IAAI,CAACC,KAAK,CAACV,KAAK,GAAGlB,OAAO,CAAE;MACjCE,GAAG,EAAEA,GAAI;MACTE,MAAM,EAAEA,MAAO;MACfH,KAAK,EAAEA,KAAM;MACb4B,UAAU,EAAEnB,aAAa,CAACQ,KAAK,CAAC,IAAI,KAAM;MAC1CE,OAAO,EAAGP,CAAC,IAAKI,WAAW,CAACC,KAAK,EAAEL,CAAC,CAAE,CAAC;MAAA;MACvCW,OAAO,EAAEA;IAAQ,GARZN,KAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASX,CAEJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEjB,CAAC;AAACxB,EAAA,CA7CIH,IAAyB;AAAA4B,GAAA,GAAzB5B,IAAyB;AA+C/B,eAAeA,IAAI;AAAC,IAAAD,EAAA,EAAA6B,GAAA;AAAAC,YAAA,CAAA9B,EAAA;AAAA8B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}