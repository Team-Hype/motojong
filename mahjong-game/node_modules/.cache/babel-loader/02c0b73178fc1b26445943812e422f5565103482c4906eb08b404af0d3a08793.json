{"ast":null,"code":"var _jsxFileName = \"/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\n// Import for particles library\n\nimport Particles from \"react-tsparticles\";\nimport GridCell from './GridCell';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledGrid = styled(motion.div)`\n  position: relative;\n  bottom: ${({\n  height,\n  gap,\n  rows\n}) => rows * (height + gap)}px;\n  right: ${({\n  width,\n  gap,\n  columns\n}) => columns * (width + gap)}px;\n`;\n_c = StyledGrid;\nconst isBlocked = (index, columns, rows, mahjongs) => {\n  const row = Math.floor(index / columns);\n  const col = index % columns;\n  if (mahjongs[row][col] === null) {\n    return true;\n  }\n  return false;\n};\nconst Grid = ({\n  columns,\n  rows,\n  gap,\n  height,\n  width,\n  style,\n  mahjongs\n}) => {\n  _s();\n  const [selectedCells, setSelectedCells] = useState({});\n  const [triggerParticles, setTriggerParticles] = useState(false);\n  const [particlePosition, setParticlePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const onCellClick = index => {\n    const currentlySelectedCells = Object.keys(selectedCells).filter(key => selectedCells[+key]);\n    if (currentlySelectedCells.length === 1) {\n      const cell1Index = +currentlySelectedCells[0];\n      const cell2Index = index;\n      if (cell1Index === cell2Index) {\n        setSelectedCells({});\n        return;\n      }\n      const cell1 = mahjongs[Math.floor(cell1Index / columns)][cell1Index % columns];\n      const cell2 = mahjongs[Math.floor(cell2Index / columns)][cell2Index % columns];\n      if ((cell1 === null || cell1 === void 0 ? void 0 : cell1.image) === (cell2 === null || cell2 === void 0 ? void 0 : cell2.image)) {\n        console.log('Match found:', cell1, cell2);\n        mahjongs[Math.floor(cell1Index / columns)][cell1Index % columns] = null;\n        mahjongs[Math.floor(cell2Index / columns)][cell2Index % columns] = null;\n\n        // Trigger particles at the matching cell position\n        setTriggerParticles(true);\n        const row = Math.floor(cell2Index / columns);\n        const col = cell2Index % columns;\n        setParticlePosition({\n          x: col * (width + gap),\n          y: row * (height + gap)\n        });\n        setTimeout(() => setTriggerParticles(false), 1000); // Stop particles after 1 second\n      }\n      setSelectedCells({});\n    } else {\n      setSelectedCells(prevSelectedCells => ({\n        ...prevSelectedCells,\n        [index]: !prevSelectedCells[index]\n      }));\n    }\n  };\n  const particleOptions = {\n    fullScreen: {\n      enable: false\n    },\n    particles: {\n      number: {\n        value: 50\n      },\n      color: {\n        value: \"#FF0000\"\n      },\n      shape: {\n        type: \"circle\"\n      },\n      size: {\n        value: {\n          min: 1,\n          max: 5\n        }\n      },\n      move: {\n        enable: true,\n        speed: 5\n      },\n      zIndex: {\n        value: 100\n      }\n    },\n    detectRetina: true\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledGrid, {\n      columns: columns,\n      rows: rows,\n      gap: gap,\n      height: height / 2,\n      width: width / 2,\n      style: style,\n      mahjongs: mahjongs,\n      children: mahjongs.flat().map((mahjong, index) => /*#__PURE__*/_jsxDEV(GridCell, {\n        isBlocked: isBlocked(index, columns, rows, mahjongs),\n        column: index % columns,\n        row: Math.floor(index / columns),\n        gap: gap,\n        height: height,\n        width: width,\n        isSelected: selectedCells[index] || false,\n        onClick: () => onCellClick(index),\n        mahjong: mahjong\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), triggerParticles && /*#__PURE__*/_jsxDEV(Particles, {\n      options: particleOptions,\n      style: {\n        position: 'absolute',\n        top: particlePosition.y,\n        left: particlePosition.x,\n        pointerEvents: 'none',\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Grid, \"KEoZaf8wKv0zyAFCGwP3+PfvL7s=\");\n_c2 = Grid;\nexport default Grid;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledGrid\");\n$RefreshReg$(_c2, \"Grid\");","map":{"version":3,"names":["React","useState","styled","motion","Particles","GridCell","jsxDEV","_jsxDEV","Fragment","_Fragment","StyledGrid","div","height","gap","rows","width","columns","_c","isBlocked","index","mahjongs","row","Math","floor","col","Grid","style","_s","selectedCells","setSelectedCells","triggerParticles","setTriggerParticles","particlePosition","setParticlePosition","x","y","onCellClick","currentlySelectedCells","Object","keys","filter","key","length","cell1Index","cell2Index","cell1","cell2","image","console","log","setTimeout","prevSelectedCells","particleOptions","fullScreen","enable","particles","number","value","color","shape","type","size","min","max","move","speed","zIndex","detectRetina","children","flat","map","mahjong","column","isSelected","onClick","fileName","_jsxFileName","lineNumber","columnNumber","options","position","top","left","pointerEvents","_c2","$RefreshReg$"],"sources":["/home/peplxx/projects/mahjong/mahjong-game/src/components/Grid.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport { loadFull } from \"tsparticles\"; // Import for particles library\nimport { Engine, Container, ISourceOptions } from \"tsparticles-engine\";\nimport Particles from \"react-tsparticles\";\nimport GridCell from './GridCell'; \nimport { Mahjong } from './game/mahjongs/Mahjong';\n\ntype GridProps = {\n  columns: number;\n  rows: number;\n  gap: number;\n  height: number;\n  width: number;\n  style?: React.CSSProperties;\n  mahjongs: (Mahjong | null)[][];\n};\n\nconst StyledGrid = styled(motion.div)<GridProps>`\n  position: relative;\n  bottom: ${({ height, gap, rows }) => rows * (height + gap)}px;\n  right: ${({ width, gap, columns }) => columns * (width + gap)}px;\n`;\n\nconst isBlocked = (index: number, columns: number, rows: number, mahjongs: (Mahjong | null)[][]): boolean => {\n  const row = Math.floor(index / columns);\n  const col = index % columns;\n  if (mahjongs[row][col] === null) {\n    return true;\n  }\n  return false;\n};\n\nconst Grid: React.FC<GridProps> = ({ columns, rows, gap, height, width, style, mahjongs }) => {\n  const [selectedCells, setSelectedCells] = useState<{ [key: number]: boolean }>({});\n  const [triggerParticles, setTriggerParticles] = useState(false);\n  const [particlePosition, setParticlePosition] = useState({ x: 0, y: 0 });\n\n  const onCellClick = (index: number) => {\n    const currentlySelectedCells = Object.keys(selectedCells).filter((key) => selectedCells[+key]);\n    if (currentlySelectedCells.length === 1) {\n      const cell1Index = +currentlySelectedCells[0];\n      const cell2Index = index;\n      if (cell1Index === cell2Index) {\n        setSelectedCells({});\n        return;\n      }\n      const cell1 = mahjongs[Math.floor(cell1Index / columns)][cell1Index % columns];\n      const cell2 = mahjongs[Math.floor(cell2Index / columns)][cell2Index % columns];\n      if (cell1?.image === cell2?.image) {\n        console.log('Match found:', cell1, cell2);\n        mahjongs[Math.floor(cell1Index / columns)][cell1Index % columns] = null;\n        mahjongs[Math.floor(cell2Index / columns)][cell2Index % columns] = null;\n\n        // Trigger particles at the matching cell position\n        setTriggerParticles(true);\n        const row = Math.floor(cell2Index / columns);\n        const col = cell2Index % columns;\n        setParticlePosition({\n          x: col * (width + gap),\n          y: row * (height + gap),\n        });\n\n        setTimeout(() => setTriggerParticles(false), 1000); // Stop particles after 1 second\n      }\n      setSelectedCells({});\n    } else {\n      setSelectedCells((prevSelectedCells) => ({\n        ...prevSelectedCells,\n        [index]: !prevSelectedCells[index],\n      }));\n    }\n  };\n\n  const particleOptions: ISourceOptions = {\n    fullScreen: { enable: false },\n    particles: {\n      number: { value: 50 },\n      color: { value: \"#FF0000\" },\n      shape: { type: \"circle\" },\n      size: { value: { min: 1, max: 5 } },\n      move: { enable: true, speed: 5 },\n      zIndex: { value: 100}\n    },\n    detectRetina: true,\n  };\n\n  return (\n    <>\n      <StyledGrid\n        columns={columns}\n        rows={rows}\n        gap={gap}\n        height={height / 2}\n        width={width / 2}\n        style={style}\n        mahjongs={mahjongs}\n      >\n        {mahjongs.flat().map((mahjong, index) => (\n          <GridCell\n            key={index}\n            isBlocked={isBlocked(index, columns, rows, mahjongs)}\n            column={index % columns}\n            row={Math.floor(index / columns)}\n            gap={gap}\n            height={height}\n            width={width}\n            isSelected={selectedCells[index] || false}\n            onClick={() => onCellClick(index)}\n            mahjong={mahjong}\n          />\n        ))}\n      </StyledGrid>\n      {triggerParticles && (\n        <Particles\n          options={particleOptions}\n          style={{\n            position: 'absolute',\n            top: particlePosition.y,\n            left: particlePosition.x,\n            pointerEvents: 'none',\n            width: '100%',\n            height: '100%',\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Grid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}